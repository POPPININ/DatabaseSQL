/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jobcandidatedatabse_ia;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raghav
 */
public class AddCandidateInfo extends javax.swing.JFrame {
   
    public AddCandidateInfo() {
        
        initComponents(); 
        Show_candidate_table();
        
    }

    // Removed due to privacy concerns
   String driver = "";
   String url = "";
   String user = "";
   String pass = "";
    
   public ArrayList<User> userList()
   {
       ArrayList<User> usersList = new ArrayList<>();
       try {
           Class.forName(driver);
           Connection con = DriverManager.getConnection(url, user, pass);
           String query1 = "SELECT * FROM CANDIDATEINFORMATION";
           PreparedStatement prepStat = con.prepareStatement(query1);
           ResultSet rs = prepStat.executeQuery();
           User user;
           
           while(rs.next()){
               user = new User(rs.getInt(
               "Candidate_ID"), rs.getString("Candidate_Name"), rs.getString("Candidate_Surname"), rs.getString("Nationality"), rs.getBoolean("English"), rs.getBoolean("Burmese"), rs.getBoolean("Bangla"),
               rs.getBoolean("Communication"), rs.getBoolean("basic_computing"), rs.getBoolean("experience"),  rs.getBoolean("Document_Validity"));
               usersList.add(user);
           }

       } catch (Exception e) {
           JOptionPane.showMessageDialog(null, e);
       }
       
       return usersList;
   }
   
   // following method displays MySQL data into JTable
   public void Show_candidate_table(){
       ArrayList<User> list = userList();
       DefaultTableModel model = (DefaultTableModel) CandidateTable.getModel();
       
       Object[] row = new Object[11];
       for(int i = 0; i < list.size(); i++)
       {
           row[0] = list.get(i).getID();
           row[1] = list.get(i).getCandName();
           row[2] = list.get(i).getCandSurname();
           row[3] = list.get(i).getNationality();
           row[4] = list.get(i).getCandEnglish();
           row[5] = list.get(i).getCandBurmese();
           row[6] = list.get(i).getCandBangla();
           row[7] = list.get(i).getCandCommunicative();
           row[8] = list.get(i).getCandBasicComp();
           row[9] = list.get(i).getCandExperienced();         
           row[10] = list.get(i).getDocSuf();
           
           model.addRow((Object[]) row);
       }    
   }
  
   // following method executed sql Query
   
   public void executeSQlQuery(String query, String message)
   {
       Connection con  = getConnection();
       PreparedStatement prepStat;
       try{
           prepStat = con.prepareStatement(query);
           if((prepStat.executeUpdate(query)) == 1)
           {
               // refresh jtable data
               DefaultTableModel model = (DefaultTableModel)CandidateTable.getModel();
               model.setRowCount(0);
               Show_candidate_table();
               
               JOptionPane.showMessageDialog(null, "Data "+ message+" Succefully");
           }else{
               JOptionPane.showMessageDialog(null, "Data Not "+message);
           }
       }catch(Exception ex){
           ex.printStackTrace();
       }
   }
                
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        candNameBox = new javax.swing.JTextField();
        candSurnameBox = new javax.swing.JTextField();
        nationalityBox = new javax.swing.JComboBox<>();
        engCheckBox = new javax.swing.JCheckBox();
        bangCheckBox = new javax.swing.JCheckBox();
        commCheckBox = new javax.swing.JCheckBox();
        burmeseCheckBox = new javax.swing.JCheckBox();
        bascompCheckBox = new javax.swing.JCheckBox();
        experCheckBox = new javax.swing.JCheckBox();
        exitFormCandidateButton = new javax.swing.JButton();
        UpdateRecordButton = new javax.swing.JButton();
        InsertRecord = new javax.swing.JButton();
        deleteCandidateRecordButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        CandidateTable = new javax.swing.JTable();
        candNameBox1 = new javax.swing.JTextField();
        backLogin = new javax.swing.JButton();
        ResetButton = new javax.swing.JButton();
        DocVal = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 153));
        setPreferredSize(new java.awt.Dimension(2000, 486));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setText("Candidate Information Record");

        jLabel2.setText("Candidate Name");

        jLabel3.setText("Candidate Surname");

        jLabel4.setText("Nationality");

        candNameBox.setBackground(new java.awt.Color(204, 255, 204));

        candSurnameBox.setBackground(new java.awt.Color(204, 255, 204));

        nationalityBox.setBackground(new java.awt.Color(204, 255, 204));
        nationalityBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chinese", "Indian", "Burmese", "Bangladeshi", "Singaporean", "Malaysian" }));
        nationalityBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nationalityBoxActionPerformed(evt);
            }
        });

        engCheckBox.setText("English");
        engCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                engCheckBoxActionPerformed(evt);
            }
        });

        bangCheckBox.setText("Bangla");

        commCheckBox.setText("Communicative");

        burmeseCheckBox.setText("Burmese");

        bascompCheckBox.setText("Basic Computing");

        experCheckBox.setText("Experienced");

        exitFormCandidateButton.setBackground(new java.awt.Color(255, 204, 204));
        exitFormCandidateButton.setText("Exit");
        exitFormCandidateButton.setActionCommand("Save");
        exitFormCandidateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitFormCandidateButtonActionPerformed(evt);
            }
        });

        UpdateRecordButton.setBackground(new java.awt.Color(255, 204, 204));
        UpdateRecordButton.setText("Update");
        UpdateRecordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateRecordButtonActionPerformed(evt);
            }
        });

        InsertRecord.setBackground(new java.awt.Color(255, 204, 204));
        InsertRecord.setText("Insert");
        InsertRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertRecordActionPerformed(evt);
            }
        });

        deleteCandidateRecordButton.setBackground(new java.awt.Color(255, 204, 204));
        deleteCandidateRecordButton.setText("Delete");
        deleteCandidateRecordButton.setActionCommand("Save");
        deleteCandidateRecordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCandidateRecordButtonActionPerformed(evt);
            }
        });

        CandidateTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Candidate ID", "Candidate Name", "Candidate Surname", "Nationality", "English", "Burmese", "Bangla", "Communicative", "Basic Computing", "Experienced", "Document Sufficiency"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        CandidateTable.setToolTipText("");
        CandidateTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CandidateTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(CandidateTable);

        candNameBox1.setBackground(new java.awt.Color(204, 255, 204));

        backLogin.setBackground(new java.awt.Color(255, 204, 204));
        backLogin.setText("Back");
        backLogin.setToolTipText("");
        backLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backLoginActionPerformed(evt);
            }
        });

        ResetButton.setBackground(new java.awt.Color(255, 204, 204));
        ResetButton.setText("Reset");
        ResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetButtonActionPerformed(evt);
            }
        });

        DocVal.setText("Candidate has sufficient documents");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backLogin)
                .addGap(281, 281, 281)
                .addComponent(jLabel1)
                .addContainerGap(844, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ResetButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(deleteCandidateRecordButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(UpdateRecordButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(InsertRecord)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(exitFormCandidateButton))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DocVal)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(burmeseCheckBox)
                                    .addComponent(commCheckBox)
                                    .addComponent(bascompCheckBox)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(nationalityBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(candSurnameBox)
                                        .addComponent(candNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(engCheckBox)
                                        .addComponent(bangCheckBox))
                                    .addComponent(experCheckBox))))))
                .addGap(60, 60, 60)
                .addComponent(jScrollPane1))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 737, Short.MAX_VALUE)
                    .addComponent(candNameBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 738, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(backLogin))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(DocVal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(candNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(candSurnameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nationalityBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(engCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bangCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(burmeseCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(commCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bascompCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(experCheckBox)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(deleteCandidateRecordButton)
                            .addComponent(UpdateRecordButton)
                            .addComponent(InsertRecord)
                            .addComponent(exitFormCandidateButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ResetButton)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(candNameBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void InsertRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertRecordActionPerformed
        
        try {
            Class.forName(driver);
            Connection con = DriverManager.getConnection(url, user, pass);
            String query2 = "insert into CANDIDATEINFORMATION (CANDIDATE_NAME, CANDIDATE_SURNAME, NATIONALITY, ENGLISH, BURMESE, BANGLA, COMMUNICATION, BASIC_COMPUTING, EXPERIENCE, DOCUMENT_VALIDITY)"
                    + "values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            
            PreparedStatement prepStat = con.prepareStatement(query2);
            prepStat.setString(1, candNameBox.getText());
            prepStat.setString(2, candSurnameBox.getText());
            
            String value = nationalityBox.getSelectedItem().toString();
            
            prepStat.setString(3, value);
            
            prepStat.setBoolean(4, engCheckBox.isSelected());
            prepStat.setBoolean(5, burmeseCheckBox.isSelected());
            prepStat.setBoolean(6, bangCheckBox.isSelected());
            
            prepStat.setBoolean(7, commCheckBox.isSelected());
            prepStat.setBoolean(8, bascompCheckBox.isSelected());
            prepStat.setBoolean(9, experCheckBox.isSelected());
            
            if(value.equals("Singaporean")){
               DocVal.setVisible(false);
               prepStat.setBoolean(10, true);
            }else{
               DocVal.setVisible(true);
               prepStat.setBoolean(10, DocVal.isSelected());
            }
            
            prepStat.executeUpdate();
            
            // refresh table
            DefaultTableModel model = (DefaultTableModel)CandidateTable.getModel();
            model.setRowCount(0);
            Show_candidate_table();
            
            JOptionPane.showMessageDialog(null, "Record saved.");
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
      
       
       
        
    }//GEN-LAST:event_InsertRecordActionPerformed

    private void exitFormCandidateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitFormCandidateButtonActionPerformed
        // exits database
        System.exit(0);
    }//GEN-LAST:event_exitFormCandidateButtonActionPerformed

    private void nationalityBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nationalityBoxActionPerformed
          String nationality =  nationalityBox.getSelectedItem().toString();
          if(nationality.equals("Singaporean")) DocVal.setVisible(false);
          else DocVal.setVisible(true);
        
    }//GEN-LAST:event_nationalityBoxActionPerformed

    private void engCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_engCheckBoxActionPerformed
       
    }//GEN-LAST:event_engCheckBoxActionPerformed

    // the following method updates the candidate record
    private void UpdateRecordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateRecordButtonActionPerformed
        try {
            Class.forName(driver);
            Connection con = DriverManager.getConnection(url, user, pass);
     
            int row = CandidateTable.getSelectedRow();
            String val2 = (CandidateTable.getModel().getValueAt(row, 0).toString());
            
            String sql = "UPDATE CANDIDATEINFORMATION SET CANDIDATE_NAME=?, CANDIDATE_SURNAME=? , NATIONALITY=? , ENGLISH=? , BURMESE=? ,BANGLA=? ,COMMUNICATION=? , BASIC_COMPUTING=?, EXPERIENCE=?, DOCUMENT_VALIDITY=?  where CANDIDATE_ID=" + val2;
             
            PreparedStatement prepStat = con.prepareStatement(sql);
            prepStat.setString(1, candNameBox.getText());
            prepStat.setString(2, candSurnameBox.getText());
            
            String value = nationalityBox.getSelectedItem().toString();
            prepStat.setString(3, value);
            
            prepStat.setBoolean(4, engCheckBox.isSelected());
            prepStat.setBoolean(5, burmeseCheckBox.isSelected());
            prepStat.setBoolean(6, bangCheckBox.isSelected());
            
            prepStat.setBoolean(7, commCheckBox.isSelected());
            prepStat.setBoolean(8, bascompCheckBox.isSelected());
            prepStat.setBoolean(9, experCheckBox.isSelected());
            
            if(value.equals("Singaporean")){
               DocVal.setVisible(false);
               prepStat.setBoolean(10, true);
            }else{
               DocVal.setVisible(true);
               prepStat.setBoolean(10, DocVal.isSelected());
            }
            
            
            prepStat.executeUpdate();
            
            DefaultTableModel model = (DefaultTableModel) CandidateTable.getModel();
            //CandidateTable.setModel(CandidateTable.getModel());
            //CandidateTable.repaint();
            model.setRowCount(0);                      
            Show_candidate_table();
            
           
            JOptionPane.showMessageDialog(null, "Record updated.");
            
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        
    }//GEN-LAST:event_UpdateRecordButtonActionPerformed
    
    // following method updates a candidate record
    private void deleteCandidateRecordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCandidateRecordButtonActionPerformed
        try {
            Class.forName(driver);
            Connection con = DriverManager.getConnection(url, user, pass);
            int row = CandidateTable.getSelectedRow();
            String value = (CandidateTable.getValueAt(row, 0).toString());
            String query = "DELETE FROM CANDIDATEINFORMATION where CANDIDATE_ID=" + value;
            PreparedStatement prepStat = con.prepareStatement(query); 
            prepStat.executeUpdate();
            
            DefaultTableModel model = (DefaultTableModel) CandidateTable.getModel();
            model.setRowCount(0);
            Show_candidate_table();
            JOptionPane.showMessageDialog(null, "Record deleted.");
            
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        
    }//GEN-LAST:event_deleteCandidateRecordButtonActionPerformed
    
    // this method loads a record into the fields
    private void CandidateTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CandidateTableMouseClicked
        // display selected record to text fields 
         // Get The Index Of The Slected Row 
        
        DefaultTableModel model = (DefaultTableModel) CandidateTable.getModel();
        int selectedRow = CandidateTable.getSelectedRow();
        
        candNameBox.setText(model.getValueAt(selectedRow, 1).toString());
        candSurnameBox.setText(model.getValueAt(selectedRow, 2).toString());
        
        String nationality = model.getValueAt(selectedRow, 3).toString();
         
        switch(nationality){
             case "Chinese":
                 nationalityBox.setSelectedIndex(0);                
                 break;
             case "Indian":
                 nationalityBox.setSelectedIndex(1);    
                 break;
             case "Burmese":
                 nationalityBox.setSelectedIndex(2);               
                 break;
             case "Bangladeshi":
                 nationalityBox.setSelectedIndex(3);             
                 break;
             case "Singaporean":
                 nationalityBox.setSelectedIndex(4);    
                 break;
             case "Malaysian":
                 nationalityBox.setSelectedIndex(5);           
                 break;    
         }
         boolean doc_val = Boolean.valueOf(model.getValueAt(selectedRow, 10).toString());
         if(nationality.equals("Singaporean")){
               DocVal.setVisible(false);
               DocVal.setSelected(true);
            }else{
               DocVal.setVisible(true);
               if(doc_val) DocVal.setSelected(true);                           
            }
         
         boolean eng = Boolean.valueOf(model.getValueAt(selectedRow, 4).toString());
         if(eng){
             engCheckBox.setSelected(true);
         }
         boolean burm = Boolean.valueOf(model.getValueAt(selectedRow, 5).toString());
         if(burm){
             burmeseCheckBox.setSelected(true);
         }
         boolean bang = Boolean.valueOf(model.getValueAt(selectedRow, 6).toString());
         if(bang){
             bangCheckBox.setSelected(true);
         }
         boolean comm = Boolean.valueOf(model.getValueAt(selectedRow, 7).toString());
         if(comm){
             commCheckBox.setSelected(true);
         }
         boolean bascomp = Boolean.valueOf(model.getValueAt(selectedRow, 8).toString());
         if(bascomp){
             bascompCheckBox.setSelected(true);
         }
         boolean exper = Boolean.valueOf(model.getValueAt(selectedRow, 9).toString());
         if(exper){
             experCheckBox.setSelected(true);
         }
         
         
         
         
        
    }//GEN-LAST:event_CandidateTableMouseClicked

    private void backLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backLoginActionPerformed
        // takes user back to login window 
        LoginWindow logwin = new LoginWindow();
        logwin.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backLoginActionPerformed

    private void ResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetButtonActionPerformed
       candNameBox.setText(null);
       candSurnameBox.setText(null);
       nationalityBox.setSelectedIndex(0);
       engCheckBox.setSelected(false);
       bangCheckBox.setSelected(false);
       burmeseCheckBox.setSelected(false);
       commCheckBox.setSelected(false);
       experCheckBox.setSelected(false);
       bascompCheckBox.setSelected(false);
       
       
    }//GEN-LAST:event_ResetButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddCandidateInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddCandidateInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddCandidateInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddCandidateInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddCandidateInfo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable CandidateTable;
    private javax.swing.JCheckBox DocVal;
    private javax.swing.JButton InsertRecord;
    private javax.swing.JButton ResetButton;
    private javax.swing.JButton UpdateRecordButton;
    private javax.swing.JButton backLogin;
    private javax.swing.JCheckBox bangCheckBox;
    private javax.swing.JCheckBox bascompCheckBox;
    private javax.swing.JCheckBox burmeseCheckBox;
    private javax.swing.JTextField candNameBox;
    private javax.swing.JTextField candNameBox1;
    private javax.swing.JTextField candSurnameBox;
    private javax.swing.JCheckBox commCheckBox;
    private javax.swing.JButton deleteCandidateRecordButton;
    private javax.swing.JCheckBox engCheckBox;
    private javax.swing.JButton exitFormCandidateButton;
    private javax.swing.JCheckBox experCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> nationalityBox;
    // End of variables declaration//GEN-END:variables

    Connection getConnection() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    ArrayList<User> getUsersList() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

   
}
