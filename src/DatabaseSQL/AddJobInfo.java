/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jobcandidatedatabse_ia;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raghav
 */
public class AddJobInfo extends javax.swing.JFrame {

    /**
     * Creates new form AddJobInfo
     */
    public AddJobInfo() {
        initComponents();
        Show_Job_table();
    }

    // Removed due to privacy concerns
   String driver = "";
   String url = "";
   String user = "";
   String pass = "";
   
   public ArrayList<Users> usersList(){
       ArrayList<Users> usersList = new ArrayList<>();
       try {
           Class.forName(driver);
           Connection con = DriverManager.getConnection(url, user, pass);
           String query1 = "SELECT * FROM JOBDESCRIPTION";
           PreparedStatement prepStat = con.prepareStatement(query1);
           ResultSet rs = prepStat.executeQuery();
           Users users; 
           
           while(rs.next()){
               users = new Users(rs.getInt(
               "Job_ID"), rs.getString("Job_Name"), rs.getBoolean("english"), rs.getBoolean("burmese"), rs.getBoolean("bangla"), 
               rs.getBoolean("communication"), rs.getBoolean("basic_computing"), rs.getBoolean("experience"));
               usersList.add(users);
           }
       } catch (Exception e) {
           JOptionPane.showMessageDialog(null, e);
       }
       return usersList;
   }
   
   // following method displays MySQL data into JTable
   public void Show_Job_table(){
       ArrayList<Users> list = usersList();
       DefaultTableModel model = (DefaultTableModel) JobDisplayTable.getModel();
       Object[] row = new Object[8];
       for(int i = 0; i < list.size(); i++)
       {
           row[0] = list.get(i).getJobID();
           row[1] = list.get(i).getJobName();
           row[2] = list.get(i).getJobEnglish();
           row[3] = list.get(i).getJobBurmese();
           row[4] = list.get(i).getJobBangla();   
           row[5] = list.get(i).getJobCommunicative();
           row[6] = list.get(i).getJobBasicComp();
           row[7] = list.get(i).getJobExperienced();
           
           model.addRow((Object[]) row);
       }    
   }
   
   // following method executed sql Query
   
   public void executeSQlQuery(String query, String message)
   {
       Connection con  = getConnection();
       PreparedStatement prepStat;
       try{
           prepStat = con.prepareStatement(query);
           if((prepStat.executeUpdate(query)) == 1)
           {
               // refresh jtable data
               DefaultTableModel model = (DefaultTableModel)JobDisplayTable.getModel();
               model.setRowCount(0);
               Show_Job_table();
               
               JOptionPane.showMessageDialog(null, "Data "+ message+" Succefully");
           }else{
               JOptionPane.showMessageDialog(null, "Data Not "+message);
           }
       }catch(Exception ex){
           ex.printStackTrace();
       }
   }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        JobBox = new javax.swing.JComboBox<>();
        JobEng = new javax.swing.JCheckBox();
        JobBang = new javax.swing.JCheckBox();
        JobBurmese = new javax.swing.JCheckBox();
        JobComm = new javax.swing.JCheckBox();
        JobBasComp = new javax.swing.JCheckBox();
        JobExper = new javax.swing.JCheckBox();
        DeleteJobRec = new javax.swing.JButton();
        UpdateJobRec = new javax.swing.JButton();
        InsertJobRec = new javax.swing.JButton();
        ExitJobRec = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        JobDisplayTable = new javax.swing.JTable();
        BackLogin = new javax.swing.JButton();
        ResBut = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel1.setText("Job Description Record");

        jLabel2.setText("Job Name");

        JobBox.setBackground(new java.awt.Color(204, 255, 204));
        JobBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Accountant", "Cashier", "Salesman", "Attendant", "Administrator" }));

        JobEng.setText("English");

        JobBang.setText("Bangla");

        JobBurmese.setText("Burmese");

        JobComm.setText("Communicative");

        JobBasComp.setText("Basic Computing");

        JobExper.setText("Experienced");

        DeleteJobRec.setBackground(new java.awt.Color(255, 204, 204));
        DeleteJobRec.setText("Delete");
        DeleteJobRec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteJobRecActionPerformed(evt);
            }
        });

        UpdateJobRec.setBackground(new java.awt.Color(255, 204, 204));
        UpdateJobRec.setText("Update");
        UpdateJobRec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateJobRecActionPerformed(evt);
            }
        });

        InsertJobRec.setBackground(new java.awt.Color(255, 204, 204));
        InsertJobRec.setText("Insert");
        InsertJobRec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertJobRecActionPerformed(evt);
            }
        });

        ExitJobRec.setBackground(new java.awt.Color(255, 204, 204));
        ExitJobRec.setText("Exit");
        ExitJobRec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitJobRecActionPerformed(evt);
            }
        });

        JobDisplayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Job ID", "Job Name", "English", "Burmese", "Bangla", "Communicative", "Basic Computing", "Experience"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        JobDisplayTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JobDisplayTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(JobDisplayTable);

        BackLogin.setBackground(new java.awt.Color(255, 204, 204));
        BackLogin.setText("Back");
        BackLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackLoginActionPerformed(evt);
            }
        });

        ResBut.setBackground(new java.awt.Color(255, 204, 204));
        ResBut.setText("Reset");
        ResBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResButActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jLabel2)
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JobBang)
                            .addComponent(JobBurmese)
                            .addComponent(JobComm)
                            .addComponent(JobBasComp)
                            .addComponent(JobExper)
                            .addComponent(JobEng)
                            .addComponent(JobBox, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(98, 98, 98))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ResBut)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(DeleteJobRec)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(UpdateJobRec)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(InsertJobRec)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ExitJobRec)))
                        .addGap(24, 24, 24)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 778, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BackLogin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(449, 449, 449))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(BackLogin)))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(JobBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JobEng)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JobBang)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JobBurmese)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JobComm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JobBasComp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JobExper)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DeleteJobRec)
                            .addComponent(UpdateJobRec)
                            .addComponent(InsertJobRec)
                            .addComponent(ExitJobRec))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ResBut)
                        .addGap(88, 88, 88))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JobDisplayTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JobDisplayTableMouseClicked
         // display selected record to text fields 
         // Get The Index Of The Slected Row 
        DefaultTableModel model = (DefaultTableModel) JobDisplayTable.getModel();
        int selectedRow = JobDisplayTable.getSelectedRow();
        
        
        String job_name = model.getValueAt(selectedRow, 1).toString();
         switch(job_name){
             case "Accountant":
                 JobBox.setSelectedIndex(0);
                 break;
             case "Cashier":
                 JobBox.setSelectedIndex(1);
                 break;
             case "Salesman":
                 JobBox.setSelectedIndex(2);
                 break;
             case "Attendant":
                 JobBox.setSelectedIndex(3);
                 break;
             case "Administrator":
                 JobBox.setSelectedIndex(4);
                 break;
                 
         }
         
         boolean english = (boolean) model.getValueAt(selectedRow, 2);
         boolean burmese = (boolean) model.getValueAt(selectedRow, 3);
         boolean bangla = (boolean) model.getValueAt(selectedRow, 4);
         
         boolean communicative = (boolean) model.getValueAt(selectedRow, 5);
         boolean bas_comp = (boolean) model.getValueAt(selectedRow, 6);
         boolean exper = (boolean) model.getValueAt(selectedRow, 7);
         
         if(english){
             JobEng.setSelected(true);
         }
         if(burmese){
             JobBurmese.setSelected(true);
         }
         if(bangla){
             JobBang.setSelected(true);
         }
         if(communicative){
             JobComm.setSelected(true);
         }
         if(bas_comp){
             JobBasComp.setSelected(true);
         }
         if(exper){
             JobExper.setSelected(true);
         }
    }//GEN-LAST:event_JobDisplayTableMouseClicked

    private void DeleteJobRecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteJobRecActionPerformed
        try {
            Class.forName(driver);
            Connection con = DriverManager.getConnection(url, user, pass);
            int row = JobDisplayTable.getSelectedRow();
            String value = (JobDisplayTable.getValueAt(row, 0).toString());
            String query = "DELETE FROM JOBDESCRIPTION where JOB_ID=" + value;
            PreparedStatement prepStat = con.prepareStatement(query); 
            prepStat.executeUpdate();
            DefaultTableModel model = (DefaultTableModel) JobDisplayTable.getModel();
            model.setRowCount(0);
            Show_Job_table();
            JOptionPane.showMessageDialog(null, "Record deleted.");
            
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        
    }//GEN-LAST:event_DeleteJobRecActionPerformed

    private void UpdateJobRecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateJobRecActionPerformed
        try {
            Class.forName(driver);
            Connection con = DriverManager.getConnection(url, user, pass);
     
            int row = JobDisplayTable.getSelectedRow();
            String val2 = (JobDisplayTable.getModel().getValueAt(row, 0).toString());
            
            String sql = "UPDATE JOBDESCRIPTION SET JOB_NAME=?,ENGLISH=?,BURMESE=?,BANGLA=?,COMMUNICATION=? , BASIC_COMPUTING=?, EXPERIENCE=?  where JOB_ID=" + val2;
            
            PreparedStatement prepStat = con.prepareStatement(sql);
            
            String value = JobBox.getSelectedItem().toString();
            prepStat.setString(1, value);
            
            prepStat.setBoolean(2, JobEng.isSelected());
            prepStat.setBoolean(3, JobBurmese.isSelected());
            prepStat.setBoolean(4, JobBang.isSelected());    
            prepStat.setBoolean(5, JobComm.isSelected());
            prepStat.setBoolean(6, JobBasComp.isSelected());
            prepStat.setBoolean(7, JobExper.isSelected());
            
            prepStat.executeUpdate();
            
            DefaultTableModel model = (DefaultTableModel) JobDisplayTable.getModel();
            model.setRowCount(0);
            Show_Job_table();
            
            JOptionPane.showMessageDialog(null, "Record updated.");
            
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        
    }//GEN-LAST:event_UpdateJobRecActionPerformed

    private void ExitJobRecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitJobRecActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitJobRecActionPerformed

    private void InsertJobRecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertJobRecActionPerformed
        try {
            Class.forName(driver);
            Connection con = DriverManager.getConnection(url, user, pass);
            String query2 = "INSERT INTO JOBDESCRIPTION (JOB_NAME, ENGLISH, BURMESE, BANGLA, COMMUNICATION, BASIC_COMPUTING, EXPERIENCE)"
                    + "values( ?, ?, ?, ?, ?, ?, ?)";
            
            PreparedStatement prepStat = con.prepareStatement(query2);
            
            String value = JobBox.getSelectedItem().toString();
            prepStat.setString(1, value);
            
            prepStat.setBoolean(2, JobEng.isSelected());
            prepStat.setBoolean(3, JobBurmese.isSelected());
            prepStat.setBoolean(4, JobBang.isSelected());   
            prepStat.setBoolean(5, JobComm.isSelected());
            prepStat.setBoolean(6, JobBasComp.isSelected());
            prepStat.setBoolean(7, JobExper.isSelected());
            
            prepStat.executeUpdate();
            DefaultTableModel model = (DefaultTableModel)JobDisplayTable.getModel();
            model.setRowCount(0);
            Show_Job_table();
            JOptionPane.showMessageDialog(null, "Record saved.");
            
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
      
    }//GEN-LAST:event_InsertJobRecActionPerformed

    private void BackLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackLoginActionPerformed
        // this code brings the user back to login window
        LoginWindow logwin = new LoginWindow();
        logwin.setVisible(true);
        this.setVisible(false);
        
    }//GEN-LAST:event_BackLoginActionPerformed

    private void ResButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResButActionPerformed
           JobBox.setSelectedIndex(0);
           JobEng.setSelected(false);
           JobBurmese.setSelected(false);
           JobBang.setSelected(false);
           JobComm.setSelected(false);
           JobBasComp.setSelected(false);
           JobExper.setSelected(false);
    }//GEN-LAST:event_ResButActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddJobInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddJobInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddJobInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddJobInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddJobInfo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackLogin;
    private javax.swing.JButton DeleteJobRec;
    private javax.swing.JButton ExitJobRec;
    private javax.swing.JButton InsertJobRec;
    private javax.swing.JCheckBox JobBang;
    private javax.swing.JCheckBox JobBasComp;
    private javax.swing.JComboBox<String> JobBox;
    private javax.swing.JCheckBox JobBurmese;
    private javax.swing.JCheckBox JobComm;
    private javax.swing.JTable JobDisplayTable;
    private javax.swing.JCheckBox JobEng;
    private javax.swing.JCheckBox JobExper;
    private javax.swing.JButton ResBut;
    private javax.swing.JButton UpdateJobRec;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private Connection getConnection() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
